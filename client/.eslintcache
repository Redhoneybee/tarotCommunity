[{"C:\\Users\\YOONEUN\\Desktop\\boiler-plate\\client\\src\\App.js":"1","C:\\Users\\YOONEUN\\Desktop\\boiler-plate\\client\\src\\components\\views\\LandingPage\\LandingPage.js":"2","C:\\Users\\YOONEUN\\Desktop\\boiler-plate\\client\\src\\components\\views\\LoginPage\\LoginPage.js":"3","C:\\Users\\YOONEUN\\Desktop\\boiler-plate\\client\\src\\components\\views\\RegisterPage\\RegisterPage.js":"4","C:\\Users\\YOONEUN\\Desktop\\boiler-plate\\client\\src\\reportWebVitals.js":"5","C:\\Users\\YOONEUN\\Desktop\\boiler-plate\\client\\src\\index.js":"6","C:\\Users\\YOONEUN\\Desktop\\boiler-plate\\client\\src\\_reducers\\index.js":"7","C:\\Users\\YOONEUN\\Desktop\\boiler-plate\\client\\src\\_actions\\types.js":"8","C:\\Users\\YOONEUN\\Desktop\\boiler-plate\\client\\src\\_actions\\user_action.js":"9","C:\\Users\\YOONEUN\\Desktop\\boiler-plate\\client\\src\\_reducers\\user_reducer.js":"10","C:\\Users\\YOONEUN\\Desktop\\boiler-plate\\client\\src\\hoc\\auth.js":"11","C:\\Users\\YOONEUN\\Desktop\\boiler-plate\\client\\src\\components\\views\\NavBar\\NavBar.js":"12","C:\\Users\\YOONEUN\\Desktop\\boiler-plate\\client\\src\\components\\views\\NavBar\\Selection\\RightMenu.js":"13","C:\\Users\\YOONEUN\\Desktop\\boiler-plate\\client\\src\\components\\views\\NavBar\\Selection\\LeftMenu.js":"14","C:\\Users\\YOONEUN\\Desktop\\boiler-plate\\client\\src\\components\\config.js":"15","C:\\Users\\YOONEUN\\Desktop\\boiler-plate\\client\\src\\pages\\TarotO\\TSpreads\\SpreadsFileUpload.js":"16","C:\\Users\\YOONEUN\\Desktop\\boiler-plate\\client\\src\\pages\\TarotO\\TSpreads\\SpreadsUpload.js":"17","C:\\Users\\YOONEUN\\Desktop\\boiler-plate\\client\\src\\pages\\TarotO\\TDirectory\\Upload.js":"18","C:\\Users\\YOONEUN\\Desktop\\boiler-plate\\client\\src\\pages\\TarotO\\TDirectory\\TDirectory.js":"19","C:\\Users\\YOONEUN\\Desktop\\boiler-plate\\client\\src\\pages\\TarotO\\TDirectory\\Sections\\ImageSlider.js":"20","C:\\Users\\YOONEUN\\Desktop\\boiler-plate\\client\\src\\pages\\TarotO\\TDirectory\\Sections\\DetailProductPage.js":"21","C:\\Users\\YOONEUN\\Desktop\\boiler-plate\\client\\src\\pages\\TarotO\\TDirectory\\FileUpload.js":"22","C:\\Users\\YOONEUN\\Desktop\\boiler-plate\\client\\src\\pages\\TarotO\\TDirectory\\Sections\\ProductImage.js":"23","C:\\Users\\YOONEUN\\Desktop\\boiler-plate\\client\\src\\pages\\TarotO\\TDirectory\\Sections\\ProductTable.js":"24","C:\\Users\\YOONEUN\\Desktop\\boiler-plate\\client\\src\\pages\\TarotO\\TBoard\\TarotBoard.js":"25","C:\\Users\\YOONEUN\\Desktop\\boiler-plate\\client\\src\\pages\\TarotO\\TBoard\\TBoardUpload.js":"26","C:\\Users\\YOONEUN\\Desktop\\boiler-plate\\client\\src\\pages\\TarotO\\TBoard\\TboardFileUpload.js":"27","C:\\Users\\YOONEUN\\Desktop\\boiler-plate\\client\\src\\pages\\TarotO\\TDirectory\\Sections\\Update.js":"28","C:\\Users\\YOONEUN\\Desktop\\boiler-plate\\client\\src\\pages\\TarotO\\TBoard\\Sections\\DetailTboardPage.js":"29","C:\\Users\\YOONEUN\\Desktop\\boiler-plate\\client\\src\\pages\\TarotO\\TBoard\\Sections\\TboardTable.js":"30","C:\\Users\\YOONEUN\\Desktop\\boiler-plate\\client\\src\\components\\views\\utils\\ImageSlider.js":"31"},{"size":2477,"mtime":1610891504047,"results":"32","hashOfConfig":"33"},{"size":1597,"mtime":1610948789800,"results":"34","hashOfConfig":"33"},{"size":1852,"mtime":1610364536657,"results":"35","hashOfConfig":"33"},{"size":2694,"mtime":1610359642845,"results":"36","hashOfConfig":"33"},{"size":362,"mtime":1606625502126,"results":"37","hashOfConfig":"33"},{"size":987,"mtime":1610273097657,"results":"38","hashOfConfig":"33"},{"size":162,"mtime":1610280077801,"results":"39","hashOfConfig":"33"},{"size":125,"mtime":1610282943572,"results":"40","hashOfConfig":"33"},{"size":784,"mtime":1610283025516,"results":"41","hashOfConfig":"33"},{"size":555,"mtime":1610283075294,"results":"42","hashOfConfig":"33"},{"size":1192,"mtime":1610523703374,"results":"43","hashOfConfig":"33"},{"size":1400,"mtime":1610530277005,"results":"44","hashOfConfig":"33"},{"size":1136,"mtime":1610363677516,"results":"45","hashOfConfig":"33"},{"size":1901,"mtime":1610367128841,"results":"46","hashOfConfig":"33"},{"size":57,"mtime":1610350538393,"results":"47","hashOfConfig":"33"},{"size":2360,"mtime":1610542995983,"results":"48","hashOfConfig":"33"},{"size":3317,"mtime":1610593263233,"results":"49","hashOfConfig":"33"},{"size":3296,"mtime":1610621184982,"results":"50","hashOfConfig":"33"},{"size":2485,"mtime":1610689498224,"results":"51","hashOfConfig":"33"},{"size":548,"mtime":1610886920040,"results":"52","hashOfConfig":"33"},{"size":884,"mtime":1610892115031,"results":"53","hashOfConfig":"33"},{"size":2346,"mtime":1610600773868,"results":"54","hashOfConfig":"33"},{"size":645,"mtime":1610609475961,"results":"55","hashOfConfig":"33"},{"size":1176,"mtime":1610880925375,"results":"56","hashOfConfig":"33"},{"size":1672,"mtime":1610892847256,"results":"57","hashOfConfig":"33"},{"size":3281,"mtime":1610688355380,"results":"58","hashOfConfig":"33"},{"size":2357,"mtime":1610621136644,"results":"59","hashOfConfig":"33"},{"size":3850,"mtime":1610879042433,"results":"60","hashOfConfig":"33"},{"size":874,"mtime":1610885943846,"results":"61","hashOfConfig":"33"},{"size":1158,"mtime":1610886070197,"results":"62","hashOfConfig":"33"},{"size":694,"mtime":1610948263180,"results":"63","hashOfConfig":"33"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"nhshyc",{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"71"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"75"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"75"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"71"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"96","messages":"97","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"100","messages":"101","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"75"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"105","messages":"106","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"75"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"75"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"75"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"75"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"126","messages":"127","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"75"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"75"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"75"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"75"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"140","messages":"141","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\YOONEUN\\Desktop\\boiler-plate\\client\\src\\App.js",[],"C:\\Users\\YOONEUN\\Desktop\\boiler-plate\\client\\src\\components\\views\\LandingPage\\LandingPage.js",[],"C:\\Users\\YOONEUN\\Desktop\\boiler-plate\\client\\src\\components\\views\\LoginPage\\LoginPage.js",["142"],"  \r\nimport React, { useState } from 'react'\r\nimport Axios from 'axios'\r\nimport { useDispatch } from 'react-redux';\r\nimport { loginUser } from '../../../_actions/user_action';\r\nimport { withRouter } from 'react-router-dom';\r\nimport './css/LoginPage.css'\r\nfunction LoginPage(props) {\r\n    const dispatch = useDispatch();\r\n\r\n    const [Email, setEmail] = useState(\"\")\r\n    const [Password, setPassword] = useState(\"\")\r\n\r\n    const onEmailHandler = (event) => {\r\n        setEmail(event.currentTarget.value)\r\n    }\r\n\r\n    const onPasswordHandler = (event) => {\r\n        setPassword(event.currentTarget.value)\r\n    }\r\n\r\n    const onSubmitHandler = (event) => {\r\n        event.preventDefault();\r\n\r\n        let body = {\r\n            email: Email,\r\n            password: Password\r\n        }\r\n\r\n        dispatch(loginUser(body))\r\n            .then(response => {\r\n                if (response.payload.loginSuccess) {\r\n                    props.history.push('/')\r\n                } else {\r\n                    alert('Error˝')\r\n                }\r\n            })\r\n\r\n\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"login-box\">\r\n            <h2>Login</h2>\r\n            <form onSubmit={onSubmitHandler}\r\n            >    \r\n                <div className=\"user-box\">\r\n                <label>Email</label>\r\n                <input type=\"email\" value={Email} onChange={onEmailHandler} required=\"\" />\r\n                </div>\r\n                <div className=\"user-box\">\r\n                <label>Password</label>\r\n                <input type=\"password\" value={Password} onChange={onPasswordHandler} required=\"\" />\r\n                </div>\r\n                <button type=\"Submit\">\r\n                 Login\r\n                </button>\r\n                <a href=\"/register\">register now!</a>\r\n               </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default withRouter(LoginPage)",["143","144"],"C:\\Users\\YOONEUN\\Desktop\\boiler-plate\\client\\src\\components\\views\\RegisterPage\\RegisterPage.js",["145"],"import React, { useState } from 'react'\r\nimport { useDispatch } from 'react-redux';\r\nimport { registerUser } from '../../../_actions/user_action';\r\nimport Axios from 'axios';\r\nimport { withRouter } from 'react-router-dom';\r\nimport './Register.css';\r\nfunction RegisterPage(props) {\r\n    const dispatch = useDispatch();\r\n\r\n    const [Email, setEmail] = useState(\"\")\r\n    const [Name, setName] = useState(\"\")\r\n    const [Password, setPassword] = useState(\"\")\r\n    const [ConfirmPassword, setConfirmPassword] = useState(\"\")\r\n\r\n\r\n    const onEmailHandler = (event) => {\r\n        setEmail(event.currentTarget.value)\r\n    }\r\n\r\n    const onNameHandler = (event) => {\r\n        setName(event.currentTarget.value)\r\n    }\r\n\r\n    const onPasswordHandler = (event) => {\r\n        setPassword(event.currentTarget.value)\r\n    }\r\n\r\n    const onConfirmPasswordHandler = (event) => {\r\n        setConfirmPassword(event.currentTarget.value)\r\n    }\r\n\r\n    const onSubmitHandler = (event) => {\r\n        event.preventDefault();\r\n\r\n        if (Password !== ConfirmPassword) {\r\n            return alert('비밀번호와 비밀번호 확인은 같아야 합니다.')\r\n        }\r\n\r\n        let body = {\r\n            email: Email,\r\n            password: Password,\r\n            name: Name\r\n        }\r\n        dispatch(registerUser(body))\r\n            .then(response => {\r\n                if (response.payload.success) {\r\n                    props.history.push(\"/login\")\r\n                } else {\r\n                    alert(\"Failed to sign up\")\r\n                }\r\n            })\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"register-box\">\r\n            <h2>Register</h2>\r\n            <form onSubmit={onSubmitHandler}\r\n            >   \r\n            <div className=\"user-box\">\r\n                <label>Email</label>\r\n                <input type=\"email\" value={Email} onChange={onEmailHandler} />\r\n               </div>\r\n               <div className=\"user-box\">\r\n                <label>Name</label>\r\n                <input type=\"text\" value={Name} onChange={onNameHandler} />\r\n              </div>\r\n              <div className=\"user-box\">\r\n                <label>Password</label>\r\n                <input type=\"password\" value={Password} onChange={onPasswordHandler} />\r\n                </div>\r\n                <div className=\"user-box\">\r\n                <label>Confirm Password</label>\r\n                <input type=\"password\" value={ConfirmPassword} onChange={onConfirmPasswordHandler} />\r\n                </div>\r\n                <br />\r\n                <button type=\"submit\">\r\n                   Sign up\r\n                </button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default withRouter(RegisterPage)",["146","147"],"C:\\Users\\YOONEUN\\Desktop\\boiler-plate\\client\\src\\reportWebVitals.js",[],"C:\\Users\\YOONEUN\\Desktop\\boiler-plate\\client\\src\\index.js",[],"C:\\Users\\YOONEUN\\Desktop\\boiler-plate\\client\\src\\_reducers\\index.js",[],"C:\\Users\\YOONEUN\\Desktop\\boiler-plate\\client\\src\\_actions\\types.js",[],"C:\\Users\\YOONEUN\\Desktop\\boiler-plate\\client\\src\\_actions\\user_action.js",[],"C:\\Users\\YOONEUN\\Desktop\\boiler-plate\\client\\src\\_reducers\\user_reducer.js",["148","149","150","151"],"import {\r\n    LOGIN_USER,\r\n    REGISTER_USER,\r\n    AUTH_USER\r\n} from '../_actions/types';\r\n\r\nexport default function (state = {}, action) {\r\n    switch (action.type) {\r\n        case LOGIN_USER:\r\n            return { ...state, loginSuccess: action.payload }\r\n            break;\r\n        case REGISTER_USER:\r\n            return { ...state, register: action.payload }\r\n            break;\r\n            case AUTH_USER:\r\n                return { ...state, userData: action.payload }\r\n                break;\r\n        default:\r\n            return state;\r\n    }\r\n}","C:\\Users\\YOONEUN\\Desktop\\boiler-plate\\client\\src\\hoc\\auth.js",["152"],"import React, { useEffect } from 'react';\r\nimport { auth } from '../_actions/user_action';\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\n\r\nexport default function (ComposedClass, reload, adminRoute = null) {\r\n    function AuthenticationCheck(props) {\r\n\r\n        let user = useSelector(state => state.user);\r\n        const dispatch = useDispatch();\r\n\r\n        useEffect(() => {\r\n\r\n            dispatch(auth()).then(async response => {\r\n                if (await !response.payload.isAuth) {\r\n                    if (reload) {\r\n                        props.history.push('/login')\r\n                    }\r\n                } else {\r\n                    if (adminRoute && !response.payload.isAdmin) {\r\n                        props.history.push('/')\r\n                    }\r\n                    else {\r\n                        if (reload === false) {\r\n                            props.history.push('/')\r\n                        }\r\n                    }\r\n                }\r\n            })\r\n            \r\n        }, [dispatch, props.history, user.googleAuth])\r\n\r\n        return (\r\n            <ComposedClass {...props} user={user} />\r\n        )\r\n    }\r\n    return AuthenticationCheck\r\n}\r\n","C:\\Users\\YOONEUN\\Desktop\\boiler-plate\\client\\src\\components\\views\\NavBar\\NavBar.js",[],"C:\\Users\\YOONEUN\\Desktop\\boiler-plate\\client\\src\\components\\views\\NavBar\\Selection\\RightMenu.js",[],"C:\\Users\\YOONEUN\\Desktop\\boiler-plate\\client\\src\\components\\views\\NavBar\\Selection\\LeftMenu.js",["153","154"],"C:\\Users\\YOONEUN\\Desktop\\boiler-plate\\client\\src\\components\\config.js",[],"C:\\Users\\YOONEUN\\Desktop\\boiler-plate\\client\\src\\pages\\TarotO\\TSpreads\\SpreadsFileUpload.js",["155"],"import React, { useState } from 'react'\r\nimport Dropzone from 'react-dropzone'\r\nimport axios from 'axios';\r\n\r\n\r\nfunction SpreadsFileUpload(props) {\r\n\r\n    const [Images, setImages] = useState([])\r\n\r\n    const dropHandler = (files) => {\r\n\r\n        let formData = new FormData();\r\n        const config = {\r\n            header: { 'content-type': 'multipart/fomr-data' }\r\n        }\r\n        formData.append(\"file\", files[0])\r\n\r\n        axios.post('/api/spreads/tarot', formData, config)\r\n            .then(response => {\r\n                if (response.data.success) {\r\n                    setImages([...Images, response.data.filePath])\r\n                    props.refreshFunction([...Images, response.data.filePath])\r\n\r\n\r\n                } else {\r\n                    alert('파일을 저장하는데 실패했습니다.')\r\n                }\r\n            })\r\n    }\r\n\r\n\r\n    const deleteHandler = (image) => {\r\n        const currentIndex = Images.indexOf(image);\r\n        let newImages = [...Images]\r\n        newImages.splice(currentIndex, 1)\r\n        setImages(newImages)\r\n        props.refreshFunction(newImages)\r\n\r\n\r\n    }\r\n\r\n\r\n    return (\r\n        <div style={{ display: 'flex', justifyContent: 'space-between' }}>\r\n            <Dropzone onDrop={dropHandler}>\r\n                {({ getRootProps, getInputProps }) => (\r\n                    <div\r\n                        style={{\r\n                            width: 300, height: 240, border: '1px solid lightgray',\r\n                            display: 'flex', alignItems: 'center', justifyContent: 'center'\r\n                        }}\r\n                        {...getRootProps()}>\r\n                        <input {...getInputProps()} />\r\n                        <p>이미지첨부</p>\r\n                    </div>\r\n                )}\r\n            </Dropzone>\r\n\r\n            <div style={{ display: 'flex', width: '350px', height: '240px', overflowX: 'scroll' }}>\r\n\r\n                {Images.map((image, index) => (\r\n                    <div onClick={() => deleteHandler(image)} key={index}>\r\n                        <img style={{ minWidth: '300px', width: '300px', height: '240px' }}\r\n                            src={`http://localhost:5000/${image}`}\r\n                        />\r\n                    </div>\r\n                ))}\r\n\r\n\r\n            </div>\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SpreadsFileUpload","C:\\Users\\YOONEUN\\Desktop\\boiler-plate\\client\\src\\pages\\TarotO\\TSpreads\\SpreadsUpload.js",["156"],"C:\\Users\\YOONEUN\\Desktop\\boiler-plate\\client\\src\\pages\\TarotO\\TDirectory\\Upload.js",["157"],"import React, { useState } from 'react'\r\nimport { Typography, Button, Form, Input } from 'antd';\r\nimport FileUpload from './FileUpload';\r\nimport Axios from 'axios';\r\nconst { TextArea } = Input;\r\n\r\nconst Continents = [\r\n    { key: 1, value: \"Africa\" },\r\n    { key: 2, value: \"Europe\" },\r\n    { key: 3, value: \"Asia\" },\r\n    { key: 4, value: \"North America\" },\r\n    { key: 5, value: \"South America\" },\r\n    { key: 6, value: \"Australia\" },\r\n    { key: 7, value: \"Antarctica\" }\r\n]\r\n\r\nfunction Upload(props) {\r\n\r\n    const [Title, setTitle] = useState(\"\")\r\n    const [Description, setDescription] = useState(\"\")\r\n    const [Continent, setContinent] = useState(1)\r\n    const [Images, setImages] = useState([])\r\n\r\n    const titleChangeHandler = (event) => {\r\n        setTitle(event.currentTarget.value)\r\n    }\r\n\r\n    const descriptionChangeHandler = (event) => {\r\n        setDescription(event.currentTarget.value)\r\n    }\r\n\r\n    const continentChangeHandler = (event) => {\r\n        setContinent(event.currentTarget.value)\r\n    }\r\n\r\n    const updateImages = (newImages) => {\r\n        setImages(newImages)\r\n    }\r\n\r\n    const submitHandler = (event) => {\r\n        event.preventDefault();\r\n\r\n        if (!Title || !Description || !Continent || Images.length === 0) {\r\n            return alert(\" 모든 값을 넣어주셔야 합니다.\")\r\n        }\r\n\r\n\r\n        //서버에 채운 값들을 request로 보낸다.\r\n\r\n        const body = {\r\n            //로그인 된 사람의 ID \r\n            writer: props.user.userData._id,\r\n            title: Title,\r\n            description: Description,\r\n            images: Images,\r\n            continents: Continent\r\n        }\r\n\r\n        Axios.post('/api/product', body)\r\n            .then(response => {\r\n                if (response.data.success) {\r\n                    alert('상품 업로드에 성공 했습니다.')\r\n                    props.history.push('/')\r\n                } else {\r\n                    alert('상품 업로드에 실패 했습니다.')\r\n                }\r\n            })\r\n    }\r\n\r\n\r\n    return (\r\n        <div style={{ maxWidth: '700px', margin: '2rem auto' }}>\r\n            <div style={{ textAlign: 'center', marginBottom: '2rem' }}>\r\n                <h2> 여행 상품 업로드</h2>\r\n            </div>\r\n\r\n            <Form onSubmit={submitHandler}>\r\n                {/* DropZone */}\r\n                <FileUpload refreshFunction={updateImages} />\r\n\r\n                <br />\r\n                <br />\r\n                <label>이름</label>\r\n                <Input onChange={titleChangeHandler} value={Title} />\r\n                <br />\r\n                <br />\r\n                <label>설명</label>\r\n                <TextArea onChange={descriptionChangeHandler} value={Description} />\r\n                <br />\r\n                <br />\r\n                <select onChange={continentChangeHandler} value={Continent}>\r\n                    {Continents.map(item => (\r\n                        <option key={item.key} value={item.key}> {item.value}</option>\r\n                    ))}\r\n                </select>\r\n                <br />\r\n                <br />\r\n                <Button type=\"submit\" onClick={submitHandler}>\r\n                    확인\r\n                </Button>\r\n            </Form>\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Upload","C:\\Users\\YOONEUN\\Desktop\\boiler-plate\\client\\src\\pages\\TarotO\\TDirectory\\TDirectory.js",["158","159"],"import React, { useEffect ,useState } from 'react'\r\nimport axios from \"axios\";\r\nimport Meta from 'antd/lib/card/Meta';\r\nimport { Col, Card, Row } from 'antd';\r\nimport ImageSlider from './Sections/ImageSlider'\r\n\r\nfunction TDirectory(props) {\r\n    const [Products, setProducts] = useState([])\r\n    const [Skip, setSkip] = useState(0)\r\n    const [Limit, setLimit] = useState(8)\r\nconst [PostSize, setPostSize] = useState(0)\r\n    \r\n    useEffect(() => {\r\n        let body = {\r\n             skip:Skip,\r\n            limit:Limit}\r\n        getProducts(body)\r\n    },[])\r\n    const getProducts = (body) => {\r\n\r\n        axios.post('/api/product/products',body)\r\n        .then(response => {\r\n            if (response.data.success) {\r\n                if(body.loadMore){\r\n                    setProducts([...Products,...response.data.productInfo])\r\n                }\r\n                setPostSize(response.data.postSize)\r\n     setProducts(response.data.productInfo)\r\n            } else {\r\n                alert(\"상품들을 가져오는데 실패했습니다.\")\r\n            }\r\n        })\r\n    }\r\n    const loadMoreHandler = () =>{\r\n         let skip = Skip + Limit \r\n                      //0 + 8 \r\n                      // 8 + 8 \r\n         let body = {\r\n            skip:Skip,\r\n            limit:Limit,\r\n            loadMore:true \r\n        }\r\n\r\n        getProducts(body)\r\n        setSkip(skip)\r\n    }\r\nconst renderCards = Products.map((productInfo,index)=>{\r\n    console.log('productInfo',productInfo)\r\n    return <Col lg={6} md={8} xs={24} key={index}>\r\n    <Card\r\n    cover={<a href={`/product/${productInfo._id}`} ><ImageSlider images={productInfo.images} /></a>}>\r\n        <Meta\r\n        title={productInfo.title}\r\n        description={productInfo.description}/>\r\n    </Card>\r\n    </Col>\r\n}) \r\n\r\n    return (\r\n       \r\n        <div style={{width:'75%', margin:'3rem auto'}}>\r\n            <div style={{textAlign: 'center'}}>\r\n                <h2>타로 백과사전</h2>\r\n            </div>\r\n            <Row gutter={[16,16]}>\r\n            {renderCards}\r\n            </Row>\r\n            {PostSize >= Limit && \r\n            <div style={{ display:'flex', justifyContent :'center'}}>\r\n           \r\n            </div> \r\n            }\r\n            <div style={{ display:'flex', justifyContent :'center'}}>\r\n            <a href=\"/product/upload\">add</a>\r\n            <button onClick={loadMoreHandler}>더보기</button>\r\n       \r\n        </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TDirectory\r\n","C:\\Users\\YOONEUN\\Desktop\\boiler-plate\\client\\src\\pages\\TarotO\\TDirectory\\Sections\\ImageSlider.js",["160","161","162","163","164"],"import React from 'react'\r\nimport { Icon, Col, Card, Row, Carousel } from 'antd';\r\n\r\nfunction ImageSlider(props) {\r\n    return (\r\n        <div>\r\n            <Carousel autoplay >\r\n                {props.images.map((image, index) => (\r\n                    <div key={index}>\r\n                        <img style={{ width: '200%', maxHeight: '150px' }}\r\n                            src={`http://localhost:5000/${image}`} />\r\n                    </div>\r\n                ))}\r\n            </Carousel>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ImageSlider","C:\\Users\\YOONEUN\\Desktop\\boiler-plate\\client\\src\\pages\\TarotO\\TDirectory\\Sections\\DetailProductPage.js",["165"],"import React,{useEffect,useState} from 'react'\r\nimport axios from 'axios';\r\nimport ProductTable from './ProductTable';\r\nfunction DetailProductPage(props) {\r\n    const productInfoId = props.match.params.productInfoId\r\n    const [Product, setProduct] = useState({})\r\n    useEffect(()=>{\r\n        axios.get(`/api/product/products_by_id?id=${productInfoId}&type=single`)\r\n        .then(response => {\r\n            if(response.data.success) {\r\n                    console.log('response.data',response.data)\r\n                    setProduct(response.data.productInfo[0])\r\n            }else {\r\n                alert('상세 정보 가져오기를 실패했습니다')\r\n            }\r\n        })\r\n    },[])\r\n    return (\r\n        <form>\r\n            <div>\r\n                    <ProductTable detail={Product}/>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default DetailProductPage\r\n","C:\\Users\\YOONEUN\\Desktop\\boiler-plate\\client\\src\\pages\\TarotO\\TDirectory\\FileUpload.js",["166"],"import React, { useState } from 'react'\r\nimport Dropzone from 'react-dropzone'\r\nimport axios from 'axios';\r\n\r\n\r\nfunction FileUpload(props) {\r\n\r\n    const [Images, setImages] = useState([])\r\n\r\n    const dropHandler = (files) => {\r\n\r\n        let formData = new FormData();\r\n        const config = {\r\n            header: { 'content-type': 'multipart/fomr-data' }\r\n        }\r\n        formData.append(\"file\", files[0])\r\n\r\n        axios.post('/api/product/image', formData, config)\r\n            .then(response => {\r\n                if (response.data.success) {\r\n                    setImages([...Images, response.data.filePath])\r\n                    props.refreshFunction([...Images, response.data.filePath])\r\n\r\n\r\n                } else {\r\n                    alert('파일을 저장하는데 실패했습니다.')\r\n                }\r\n            })\r\n    }\r\n\r\n\r\n    const deleteHandler = (image) => {\r\n        const currentIndex = Images.indexOf(image);\r\n        let newImages = [...Images]\r\n        newImages.splice(currentIndex, 1)\r\n        setImages(newImages)\r\n        props.refreshFunction(newImages)\r\n\r\n\r\n    }\r\n\r\n\r\n    return (\r\n        <div style={{ display: 'flex', justifyContent: 'space-between' }}>\r\n            <Dropzone onDrop={dropHandler}>\r\n                {({ getRootProps, getInputProps }) => (\r\n                    <div\r\n                        style={{\r\n                            width: 300, height: 240, border: '1px solid lightgray',\r\n                            display: 'flex', alignItems: 'center', justifyContent: 'center'\r\n                        }}\r\n                        {...getRootProps()}>\r\n                        <input {...getInputProps()} />\r\n                        <p>이미지첨부</p>\r\n                    </div>\r\n                )}\r\n            </Dropzone>\r\n\r\n            <div style={{ display: 'flex', width: '350px', height: '240px', overflowX: 'scroll' }}>\r\n\r\n                {Images.map((image, index) => (\r\n                    <div onClick={() => deleteHandler(image)} key={index}>\r\n                        <img style={{ minWidth: '300px', width: '300px', height: '240px' }}\r\n                            src={`http://localhost:5000/${image}`}\r\n                        />\r\n                    </div>\r\n                ))}\r\n\r\n\r\n            </div>\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FileUpload","C:\\Users\\YOONEUN\\Desktop\\boiler-plate\\client\\src\\pages\\TarotO\\TDirectory\\Sections\\ProductImage.js",["167"],"C:\\Users\\YOONEUN\\Desktop\\boiler-plate\\client\\src\\pages\\TarotO\\TDirectory\\Sections\\ProductTable.js",[],"C:\\Users\\YOONEUN\\Desktop\\boiler-plate\\client\\src\\pages\\TarotO\\TBoard\\TarotBoard.js",[],"C:\\Users\\YOONEUN\\Desktop\\boiler-plate\\client\\src\\pages\\TarotO\\TBoard\\TBoardUpload.js",["168"],"import React, { useState } from 'react'\r\nimport { Typography, Button, Form, Input } from 'antd';\r\nimport FileUpload from './TboardFileUpload';\r\nimport Axios from 'axios';\r\nconst { TextArea } = Input;\r\n\r\nconst Continents = [\r\n    { key: 1, value: \"Africa\" },\r\n    { key: 2, value: \"Europe\" },\r\n    { key: 3, value: \"Asia\" },\r\n    { key: 4, value: \"North America\" },\r\n    { key: 5, value: \"South America\" },\r\n    { key: 6, value: \"Australia\" },\r\n    { key: 7, value: \"Antarctica\" }\r\n]\r\n\r\nfunction TBoardUpload(props) {\r\n\r\n    const [Title, setTitle] = useState(\"\")\r\n    const [Description, setDescription] = useState(\"\")\r\n    const [Continent, setContinent] = useState()\r\n    const [Images, setImages] = useState([])\r\n\r\n    const titleChangeHandler = (event) => {\r\n        setTitle(event.currentTarget.value)\r\n    }\r\n\r\n    const descriptionChangeHandler = (event) => {\r\n        setDescription(event.currentTarget.value)\r\n    }\r\n\r\n    const continentChangeHandler = (event) => {\r\n        setContinent(event.currentTarget.value)\r\n    }\r\n\r\n    const updateImages = (newImages) => {\r\n        setImages(newImages)\r\n    }\r\n\r\n    const submitHandler = (event) => {\r\n        event.preventDefault();\r\n\r\n        if (!Title || !Description || !Continent || Images.length === 0) {\r\n            return alert(\" 모든 값을 넣어주셔야 합니다.\")\r\n        }\r\n\r\n        //서버에 채운 값들을 request로 보낸다.\r\n\r\n        const body = {\r\n            //로그인 된 사람의 ID \r\n            writer: props.user.userData._id,\r\n            title: Title,\r\n            description: Description,\r\n            images: Images,\r\n            continents: Continent\r\n        }\r\n\r\n        Axios.post('/api/tboard', body)\r\n            .then(response => {\r\n                if (response.data.success) {\r\n                    alert('업로드에 성공 했습니다.')\r\n                    props.history.push('/')\r\n                } else {\r\n                    alert('업로드에 실패 했습니다.')\r\n                }\r\n            })\r\n    }\r\n\r\n\r\n    return (\r\n        <div style={{ maxWidth: '700px', margin: '2rem auto' }}>\r\n            <div style={{ textAlign: 'center', marginBottom: '2rem' }}>\r\n                <h2>글쓰기</h2>\r\n            </div>\r\n\r\n            <Form onSubmit={submitHandler}>\r\n                {/* DropZone */}\r\n                <FileUpload refreshFunction={updateImages} />\r\n\r\n                <br />\r\n                <br />\r\n                <label>제목</label>\r\n                <Input onChange={titleChangeHandler} value={Title} />\r\n                <br />\r\n                <br />\r\n                <label>내용</label>\r\n                <TextArea onChange={descriptionChangeHandler} value={Description} />\r\n                <br />\r\n                <br />\r\n                <select onChange={continentChangeHandler} value={Continent}>\r\n                    {Continents.map(item => (\r\n                        <option key={item.key} value={item.key}> {item.value}</option>\r\n                    ))}\r\n                </select>\r\n                <br />\r\n                <br />\r\n                <Button type=\"submit\" onClick={submitHandler}>\r\n                    확인\r\n                </Button>\r\n            </Form>\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TBoardUpload","C:\\Users\\YOONEUN\\Desktop\\boiler-plate\\client\\src\\pages\\TarotO\\TBoard\\TboardFileUpload.js",["169"],"import React, { useState } from 'react'\r\nimport Dropzone from 'react-dropzone'\r\nimport axios from 'axios';\r\n\r\n\r\nfunction TboardFileUpload(props) {\r\n\r\n    const [Images, setImages] = useState([])\r\n\r\n    const dropHandler = (files) => {\r\n\r\n        let formData = new FormData();\r\n        const config = {\r\n            header: { 'content-type': 'multipart/fomr-data' }\r\n        }\r\n        formData.append(\"file\", files[0])\r\n\r\n        axios.post('/api/tboard/image', formData, config)\r\n            .then(response => {\r\n                if (response.data.success) {\r\n                    setImages([...Images, response.data.filePath])\r\n                    props.refreshFunction([...Images, response.data.filePath])\r\n\r\n\r\n                } else {\r\n                    alert('파일을 저장하는데 실패했습니다.')\r\n                }\r\n            })\r\n    }\r\n\r\n\r\n    const deleteHandler = (image) => {\r\n        const currentIndex = Images.indexOf(image);\r\n        let newImages = [...Images]\r\n        newImages.splice(currentIndex, 1)\r\n        setImages(newImages)\r\n        props.refreshFunction(newImages)\r\n\r\n\r\n    }\r\n\r\n\r\n    return (\r\n        <div style={{ display: 'flex', justifyContent: 'space-between' }}>\r\n            <Dropzone onDrop={dropHandler}>\r\n                {({ getRootProps, getInputProps }) => (\r\n                    <div\r\n                        style={{\r\n                            width: 300, height: 240, border: '1px solid lightgray',\r\n                            display: 'flex', alignItems: 'center', justifyContent: 'center'\r\n                        }}\r\n                        {...getRootProps()}>\r\n                        <input {...getInputProps()} />\r\n                        <p>이미지첨부</p>\r\n                    </div>\r\n                )}\r\n            </Dropzone>\r\n\r\n            <div style={{ display: 'flex', width: '350px', height: '240px', overflowX: 'scroll' }}>\r\n\r\n                {Images.map((image, index) => (\r\n                    <div onClick={() => deleteHandler(image)} key={index}>\r\n                        <img style={{ minWidth: '300px', width: '300px', height: '240px' }}\r\n                            src={`http://localhost:5000/${image}`}\r\n                        />\r\n                    </div>\r\n                ))}\r\n\r\n\r\n            </div>\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TboardFileUpload","C:\\Users\\YOONEUN\\Desktop\\boiler-plate\\client\\src\\pages\\TarotO\\TDirectory\\Sections\\Update.js",["170","171","172"],"import React, { useState ,useEffect} from 'react'\r\nimport { Typography, Button, Form, Input } from 'antd';\r\nimport FileUpload from '../FileUpload';\r\nimport Axios from 'axios';\r\nconst { TextArea } = Input;\r\n\r\nconst Continents = [\r\n    { key: 1, value: \"Africa\" },\r\n    { key: 2, value: \"Europe\" },\r\n    { key: 3, value: \"Asia\" },\r\n    { key: 4, value: \"North America\" },\r\n    { key: 5, value: \"South America\" },\r\n    { key: 6, value: \"Australia\" },\r\n    { key: 7, value: \"Antarctica\" }\r\n]\r\n\r\nfunction Update(props) {\r\n    const productInfoId = props.match.params.productInfoId\r\n    const [Product, setProduct] = useState({})\r\n    useEffect(()=>{\r\n        Axios.get(`/api/product/products_by_id?id=${productInfoId}&type=single`)\r\n        .then(response => {\r\n            if(response.data.success) {\r\n                    console.log('response.data',response.data)\r\n                    setProduct(response.data.productInfo[0])\r\n            }else {\r\n                alert('상세 정보 가져오기를 실패했습니다')\r\n            }\r\n        })\r\n    },[])\r\n\r\n    const [Title, setTitle] = useState(\"\")\r\n    const [Description, setDescription] = useState(\"\")\r\n    const [Continent, setContinent] = useState(1)\r\n    const [Images, setImages] = useState([])\r\n\r\n    const titleChangeHandler = (event) => {\r\n        setTitle(event.currentTarget.value)\r\n    }\r\n\r\n    const descriptionChangeHandler = (event) => {\r\n        setDescription(event.currentTarget.value)\r\n    }\r\n\r\n    const continentChangeHandler = (event) => {\r\n        setContinent(event.currentTarget.value)\r\n    }\r\n\r\n    const updateImages = (newImages) => {\r\n        setImages(newImages)\r\n    }\r\n\r\n    const submitHandler = (event) => {\r\n        event.preventDefault();\r\n\r\n        if (!Title || !Description || !Continent || Images.length === 0) {\r\n            return alert(\" 모든 값을 넣어주셔야 합니다.\")\r\n        }\r\n\r\n\r\n        //서버에 채운 값들을 request로 보낸다.\r\n\r\n        const body = {\r\n            //로그인 된 사람의 ID \r\n            writer: props.user.userData._id,\r\n            title: Title,\r\n            description: Description,\r\n            images: Images,\r\n            continents: Continent\r\n        }\r\n\r\n        Axios.post('/api/product/update', body)\r\n            .then(response => {\r\n                if (response.data.success) {\r\n                    alert('상품 업로드에 성공 했습니다.')\r\n                    props.history.push('/')\r\n                } else {\r\n                    alert('상품 업로드에 실패 했습니다.')\r\n                }\r\n            })\r\n    }\r\n\r\n\r\n    return (\r\n        \r\n        <div style={{ maxWidth: '700px', margin: '2rem auto' }}>\r\n            <div style={{ textAlign: 'center', marginBottom: '2rem' }}>\r\n                <h2>글쓰기</h2>\r\n            </div>\r\n\r\n            <Form onSubmit={submitHandler}>\r\n                {/* DropZone */}\r\n                <FileUpload refreshFunction={updateImages} />\r\n\r\n                <br />\r\n                <br />\r\n                <label>이름</label>\r\n                <Input onChange={titleChangeHandler} value={Title} />\r\n                <br />\r\n                <br />\r\n                <label>설명</label>\r\n                <TextArea onChange={descriptionChangeHandler} value={Description} />\r\n                <br />\r\n                <br />\r\n                <select onChange={continentChangeHandler} value={Continent}>\r\n                    {Continents.map(item => (\r\n                        <option key={item.key} value={item.key}> {item.value}</option>\r\n                    ))}\r\n                </select>\r\n                <br />\r\n                <br />\r\n                <Button type=\"submit\" onClick={submitHandler}>\r\n                    확인\r\n                </Button>\r\n            </Form>\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Update","C:\\Users\\YOONEUN\\Desktop\\boiler-plate\\client\\src\\pages\\TarotO\\TBoard\\Sections\\DetailTboardPage.js",["173"],"import React,{useEffect,useState} from 'react'\r\nimport axios from 'axios';\r\nimport TboardTable from './TboardTable';\r\nfunction DetailTboardPage(props) {\r\n    const tboardInfoId = props.match.params.tboardInfoId\r\n    const [Tboards, setTboards] = useState({})\r\n    useEffect(()=>{\r\n        axios.get(`/api/tboard/tboard_by_id?id=${tboardInfoId}&type=single`)\r\n        .then(response => {\r\n            if(response.data.success) {  \r\n                    console.log('response.data',response.data)\r\n                    setTboards(response.data.tboardInfo[0])\r\n            }else {\r\n                alert('상세 정보 가져오기를 실패했습니다')\r\n            }\r\n        })\r\n    },[])\r\n    return (\r\n        <form>\r\n            <div>\r\n                    <TboardTable detail={Tboards}/>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default DetailTboardPage\r\n","C:\\Users\\YOONEUN\\Desktop\\boiler-plate\\client\\src\\pages\\TarotO\\TBoard\\Sections\\TboardTable.js",[],"C:\\Users\\YOONEUN\\Desktop\\boiler-plate\\client\\src\\components\\views\\utils\\ImageSlider.js",["174","175","176","177","178","179","180"],{"ruleId":"181","severity":1,"message":"182","line":3,"column":8,"nodeType":"183","messageId":"184","endLine":3,"endColumn":13},{"ruleId":"185","replacedBy":"186"},{"ruleId":"187","replacedBy":"188"},{"ruleId":"181","severity":1,"message":"182","line":4,"column":8,"nodeType":"183","messageId":"184","endLine":4,"endColumn":13},{"ruleId":"185","replacedBy":"189"},{"ruleId":"187","replacedBy":"190"},{"ruleId":"191","severity":1,"message":"192","line":7,"column":1,"nodeType":"193","endLine":21,"endColumn":2},{"ruleId":"194","severity":1,"message":"195","line":11,"column":13,"nodeType":"196","messageId":"197","endLine":11,"endColumn":19},{"ruleId":"194","severity":1,"message":"195","line":14,"column":13,"nodeType":"196","messageId":"197","endLine":14,"endColumn":19},{"ruleId":"194","severity":1,"message":"195","line":17,"column":17,"nodeType":"196","messageId":"197","endLine":17,"endColumn":23},{"ruleId":"191","severity":1,"message":"192","line":5,"column":1,"nodeType":"193","endLine":37,"endColumn":2},{"ruleId":"198","severity":1,"message":"199","line":22,"column":36,"nodeType":"200","endLine":22,"endColumn":62},{"ruleId":"198","severity":1,"message":"199","line":23,"column":36,"nodeType":"200","endLine":23,"endColumn":62},{"ruleId":"201","severity":1,"message":"202","line":63,"column":25,"nodeType":"200","endLine":65,"endColumn":27},{"ruleId":"181","severity":1,"message":"203","line":2,"column":10,"nodeType":"183","messageId":"184","endLine":2,"endColumn":20},{"ruleId":"181","severity":1,"message":"203","line":2,"column":10,"nodeType":"183","messageId":"184","endLine":2,"endColumn":20},{"ruleId":"181","severity":1,"message":"204","line":10,"column":19,"nodeType":"183","messageId":"184","endLine":10,"endColumn":27},{"ruleId":"205","severity":1,"message":"206","line":18,"column":7,"nodeType":"207","endLine":18,"endColumn":9,"suggestions":"208"},{"ruleId":"181","severity":1,"message":"209","line":2,"column":10,"nodeType":"183","messageId":"184","endLine":2,"endColumn":14},{"ruleId":"181","severity":1,"message":"210","line":2,"column":16,"nodeType":"183","messageId":"184","endLine":2,"endColumn":19},{"ruleId":"181","severity":1,"message":"211","line":2,"column":21,"nodeType":"183","messageId":"184","endLine":2,"endColumn":25},{"ruleId":"181","severity":1,"message":"212","line":2,"column":27,"nodeType":"183","messageId":"184","endLine":2,"endColumn":30},{"ruleId":"201","severity":1,"message":"202","line":10,"column":25,"nodeType":"200","endLine":11,"endColumn":70},{"ruleId":"205","severity":1,"message":"213","line":17,"column":7,"nodeType":"207","endLine":17,"endColumn":9,"suggestions":"214"},{"ruleId":"201","severity":1,"message":"202","line":63,"column":25,"nodeType":"200","endLine":65,"endColumn":27},{"ruleId":"215","severity":1,"message":"216","line":9,"column":39,"nodeType":"217","messageId":"218","endLine":9,"endColumn":41},{"ruleId":"181","severity":1,"message":"203","line":2,"column":10,"nodeType":"183","messageId":"184","endLine":2,"endColumn":20},{"ruleId":"201","severity":1,"message":"202","line":63,"column":25,"nodeType":"200","endLine":65,"endColumn":27},{"ruleId":"181","severity":1,"message":"203","line":2,"column":10,"nodeType":"183","messageId":"184","endLine":2,"endColumn":20},{"ruleId":"181","severity":1,"message":"219","line":19,"column":12,"nodeType":"183","messageId":"184","endLine":19,"endColumn":19},{"ruleId":"205","severity":1,"message":"213","line":30,"column":7,"nodeType":"207","endLine":30,"endColumn":9,"suggestions":"220"},{"ruleId":"205","severity":1,"message":"221","line":17,"column":7,"nodeType":"207","endLine":17,"endColumn":9,"suggestions":"222"},{"ruleId":"181","severity":1,"message":"209","line":2,"column":10,"nodeType":"183","messageId":"184","endLine":2,"endColumn":14},{"ruleId":"181","severity":1,"message":"210","line":2,"column":16,"nodeType":"183","messageId":"184","endLine":2,"endColumn":19},{"ruleId":"181","severity":1,"message":"211","line":2,"column":21,"nodeType":"183","messageId":"184","endLine":2,"endColumn":25},{"ruleId":"181","severity":1,"message":"212","line":2,"column":27,"nodeType":"183","messageId":"184","endLine":2,"endColumn":30},{"ruleId":"201","severity":1,"message":"202","line":8,"column":11,"nodeType":"200","endLine":8,"endColumn":102},{"ruleId":"201","severity":1,"message":"202","line":11,"column":11,"nodeType":"200","endLine":11,"endColumn":134},{"ruleId":"201","severity":1,"message":"202","line":14,"column":11,"nodeType":"200","endLine":14,"endColumn":127},"no-unused-vars","'Axios' is defined but never used.","Identifier","unusedVar","no-native-reassign",["223"],"no-negated-in-lhs",["224"],["223"],["224"],"import/no-anonymous-default-export","Unexpected default export of anonymous function","ExportDefaultDeclaration","no-unreachable","Unreachable code.","BreakStatement","unreachableCode","jsx-a11y/anchor-has-content","Anchors must have content and the content must be accessible by a screen reader.","JSXOpeningElement","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","'Typography' is defined but never used.","'setLimit' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'Limit', 'Skip', and 'getProducts'. Either include them or remove the dependency array.","ArrayExpression",["225"],"'Icon' is defined but never used.","'Col' is defined but never used.","'Card' is defined but never used.","'Row' is defined but never used.","React Hook useEffect has a missing dependency: 'productInfoId'. Either include it or remove the dependency array.",["226"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'Product' is assigned a value but never used.",["227"],"React Hook useEffect has a missing dependency: 'tboardInfoId'. Either include it or remove the dependency array.",["228"],"no-global-assign","no-unsafe-negation",{"desc":"229","fix":"230"},{"desc":"231","fix":"232"},{"desc":"231","fix":"233"},{"desc":"234","fix":"235"},"Update the dependencies array to be: [Limit, Skip, getProducts]",{"range":"236","text":"237"},"Update the dependencies array to be: [productInfoId]",{"range":"238","text":"239"},{"range":"240","text":"239"},"Update the dependencies array to be: [tboardInfoId]",{"range":"241","text":"242"},[556,558],"[Limit, Skip, getProducts]",[663,665],"[productInfoId]",[1023,1025],[655,657],"[tboardInfoId]"]